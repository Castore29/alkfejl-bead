package hu.elte.alkfejl.fishingshop.model;

import java.util.Date;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.MappedSuperclass;
import javax.persistence.PrePersist;
import javax.persistence.Version;

import org.springframework.format.annotation.DateTimeFormat;

import com.fasterxml.jackson.annotation.JsonIgnore;

import lombok.Data;
import lombok.EqualsAndHashCode;

/**
 * The BaseEntity class is an abstract class from which the other entities are
 * extended from Extended by the User class, the Product class and the Order
 * class Defines basic database columns for all extended classes
 */

@Data // Lombok annotation to generate getters and setters at runtime
// JPA annotation to mark BaseEntity as a class whose mapping information
// isapplied to the entities that inherit from it
@MappedSuperclass
// Lombok annotation to generate equals and hashcode methods based on the id
// property of the class
@EqualsAndHashCode(of = { "id" })
public abstract class BaseEntity {

	@Id // JPA annotation to mark id as a primary key for the table
	// JPA annotation to mark id as an autogenerated value (done by the database)
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;

	/**
	 * JPA annotation to ensure database integrity during a merge operation, e.g. an
	 * entity update with lower version than the current version in the database
	 * will cause an error
	 */
	@Version
	@JsonIgnore // Marker annotation to ignore the version attribute during JSON serialization
	private long version;

	// Annotation to make sure Spring is able to convert incoming Strings
	// into Date
	@DateTimeFormat
	// Marker annotation to ignore the createDate attribute during JSON
	// serialization
	@JsonIgnore
	private Date createDate;

	@JsonIgnore // Marker annotation to ignore the active attribute during JSON serialization
	private boolean active;

	/**
	 * JPA annotation that marks the preInsert() method. It always executes before a
	 * new insertion is made into the database It will NOT execute before an
	 * update/delete. The preInsert() method initializes the createDate and active
	 * properties to their default values
	 */
	@PrePersist
	void preInsert() {
		if (this.createDate == null) {
			this.createDate = new Date();
			this.active = true;
		}
	}

}
